#%RAML 1.0
title: Open API for FSP Interoperability (FSPIOP)
version: 1.0
mediaType: application/vnd.interoperability.resource+json;version=1.0
baseUri: http://localhost:8081/fsp
description: "Based on API Definition.docx updated on 2018-03-13 Version 1.0. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header."

types:
  Amount:
    type: string
    pattern: ^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$
    maxLength: 32
    description: "The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed."
  AmountType:
    type: string
    enum: [SEND, RECEIVE]
    description: "Below are the allowed values for the enumeration AmountType
    - SEND Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
    - RECEIVE Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive fees."
  AuthenticationType:
    type: string
    enum: [OTP, QRCODE]
    description: "Below are the allowed values for the enumeration AuthenticationType.
    - OTP One-time password generated by the Payer FSP.
    - QRCODE QR code used as One Time Password."
  AuthenticationValue:
    type: string
    pattern: ^\d{3,10}$|^\S{1,64}$
    description: "Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type."
  AuthorizationResponse:
    type: string
    enum: [ENTERED, REJECTED, RESEND]
    description: "Below are the allowed values for the enumeration
    - ENTERED Consumer entered the authentication value.
    - REJECTED Consumer rejected the transaction.
    - RESEND Consumer requested to resend the authentication value."
  BalanceOfPayments:
    type: string
    pattern: ^[1-9]\d{2}$
    description: "(BopCode) The API data type BopCode is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. https://www.imf.org/external/np/sta/bopcode/ "
  BinaryString:
    type: string
    pattern: ^[A-Za-z0-9-_]+[=]{0,2}$
    description: "The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters."
  BinaryString32:
    type: string
    pattern: ^[A-Za-z0-9-_]{43}$
    description: "The API data type BinaryString32 is a fixed size version of the API data type BinaryString, where the raw underlying data is always of 32 bytes. The data type BinaryString32 should not use a padding character as the size of the underlying data is fixed."
  BulkTransferState:
    type: string
    enum: [RECEIVED, PENDING, ACCEPTED, PROCESSING, COMPLETED, REJECTED]
    description: "Below are the allowed values for the enumeration 
    - RECEIVED Payee FSP has received the bulk transfer from the Payer FSP. 
    - PENDING Payee FSP has validated the bulk transfer. 
    - ACCEPTED Payee FSP has accepted to process the bulk transfer. 
    - PROCESSING Payee FSP has started to transfer fund to the Payees. 
    - COMPLETED Payee FSP has completed transfer of funds to the Payees.
    - REJECTED Payee FSP has rejected to process the bulk transfer."
  Code:
    type: string
    pattern: ^[a-zA-Z0-9-_]{4,32}$
    #pattern: ^[0-9a-zA-Z]{4,32}$ This is giving error so added as above
    description: "Any code/token returned by the Payee FSP (TokenCode Type)."
  CorrelationId:
    type: string
    pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
    description: "Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘)."
  Currency:
    type: string
    description: "The currency codes defined in ISO 4217 as three-letter alphabetic codes are used as the standard naming representation for currencies."
    enum: [AED, AFN, ALL, AMD, ANG, AOA, ARS, AUD, AWG, AZN, BAM, BBD, BDT, BGN, BHD, BIF, BMD, BND, BOB, BRL, BSD, BTN, BWP, BYN, BZD, CAD, CDF, CHF, CLP, CNY, COP, CRC, CUC, CUP, CVE, CZK, DJF, DKK, DOP, DZD, EGP, ERN, ETB, EUR, FJD, FKP, GBP, GEL, GGP, GHS, GIP, GMD, GNF, GTQ, GYD, HKD, HNL, HRK, HTG, HUF, IDR, ILS, IMP, INR, IQD, IRR, ISK, JEP, JMD, JOD, JPY, KES, KGS, KHR, KMF, KPW, KRW, KWD, KYD, KZT, LAK, LBP, LKR, LRD, LSL, LYD, MAD, MDL, MGA, MKD, MMK, MNT, MOP, MRO, MUR, MVR, MWK, MXN, MYR, MZN, NAD, NGN, NIO, NOK, NPR, NZD, OMR, PAB, PEN, PGK, PHP, PKR, PLN, PYG, QAR, RON, RSD, RUB, RWF, SAR, SBD, SCR, SDG, SEK, SGD, SHP, SLL, SOS, SPL*, SRD, STD, SVC, SYP, SZL, THB, TJS, TMT, TND, TOP, TRY, TTD, TVD, TWD, TZS, UAH, UGX, USD, UYU, UZS, VEF, VND, VUV, WST, XAF, XCD, XDR, XOF, XPF, YER, ZAR, ZMW, ZWD]
  Date:
    type: string
    pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
    description: "The API data type Date is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. This format, as specified in ISO 8601, contains a date only. A more readable version of the format is \"yyyy-MM-dd\", e.g. \"1982-05-23\" or \"1987-08-05\"."
  DateOfBirth:
    type: string
    pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
    description: "Date of Birth for the Party."
  DateTime:
    type: string
    pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
    description: "The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to ISO 8601, expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples -\"2016-05-24T08:38:08.699-04:00\" or \"2016-05-24T08:38:08.699Z\" (where Z indicates Zulu time zone, same as UTC)."
  ErrorCode:
    type: string
    pattern: ^[1-9]\d{3}$
    description: "The API data type ErrorCode is a JSON String of 4 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represents the specific error."
  ErrorDescription:
    type: string
    minLength: 1
    maxLength: 128
    description: "Error description string."
  ExtensionKey:
    type: string
    minLength: 1
    maxLength: 32
    description: "Extension key."
  ExtensionValue:
    type: string
    minLength: 1
    maxLength: 128
    description: "Extension value."
  FirstName:
    type: string
    pattern: ^(?!\s*$)[\w .,'-]{1,128}$
    description: "First name of the Party (Name Type)."
  FspId:
    type: string
    minLength: 1
    maxLength: 32
    description: "FSP identifier."
  IlpCondition:
    type: string
    pattern: ^[A-Za-z0-9-_]{43}$
    maxLength: 48
    description: "Condition that must be attached to the transfer by the Payer."
  IlpFulfilment:
    type: string
    pattern: ^[A-Za-z0-9-_]{43}$
    maxLength: 48
    description: "Fulfilment that must be attached to the transfer by the Payee."
  IlpPacket:
    type: string
    pattern: ^[A-Za-z0-9-_]+[=]{0,2}$
    minLength: 1
    maxLength: 32768
    description: "Information for recipient (transport layer information)."
  Integer:
    type: string
    pattern: ^[1-9]\d*$
    description: "The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits."
  LastName:
    type: string
    pattern: ^(?!\s*$)[\w .,'-]{1,128}$
    description: "Last name of the Party (Name Type)."
  Latitude:
    type: string
    pattern: ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
    description: "The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons."
  Longitude:
    type: string
    pattern: ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
    description: "The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons."
  MerchantClassificationCode:
    type: string
    pattern: ^[\d]{1,4}$
    description: "A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc."
  MiddleName:
    type: string
    pattern: ^(?!\s*$)[\w .,'-]{1,128}$
    description: "Middle name of the Party (Name Type)."
  Note:
    type: string
    minLength: 1
    maxLength: 128
    description: "Memo assigned to transaction"
  OtpValue:
    type: string
    pattern: ^\d{3,10}$
    description: "The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed."
  PartyIdentifier:
    type: string
    minLength: 1
    maxLength: 128
    description: "Identifier of the Party."
  PartyIdType:
    type: string
    enum: [MSISDN, EMAIL, PERSONAL_ID, BUSINESS, DEVICE, ACCOUNT_ID, IBAN, ALIAS]
    description: "Below are the allowed values for the enumeration
    - MSISDN An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the ITU-T E.164 standard. Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
    - EMAIL An email is used as reference to a participant. The format of the email should be according to the informational RFC 3696.
    - PERSONAL_ID A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
    - BUSINESS A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
    - DEVICE A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
    - ACCOUNT_ID A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
    - IBAN A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
    - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier."
  PartyName:
    type: string
    minLength: 1
    maxLength: 128
    description: "Name of the Party. Could be a real name or a nickname."
  PartySubIdOrType:
    type: string
    minLength: 1
    maxLength: 128
    description: "Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType."
  PersonalIdentifierType:
    type: string
    enum: [ PASSPORT, NATIONAL_REGISTRATION, DRIVING_LICENSE, ALIEN_REGISTRATION, NATIONAL_ID_CARD, EMPLOYER_ID, TAX_ID_NUMBER, SENIOR_CITIZENS_CARD, MARRIAGE_CERTIFICATE, HEALTH_CARD, VOTERS_ID, UNITED_NATIONS, OTHER_ID]
    description: "Below are the allowed values for the enumeration
    - PASSPORT A passport number is used as reference to a Party.
    - NATIONAL_REGISTRATION A national registration number is used as reference to a Party.
    - DRIVING_LICENSE A driving license is used as reference to a Party.
    - ALIEN_REGISTRATION An alien registration number is used as reference to a Party.
    - NATIONAL_ID_CARD A national ID card number is used as reference to a Party.
    - EMPLOYER_ID A tax identification number is used as reference to a Party.
    - TAX_ID_NUMBER A tax identification number is used as reference to a Party.
    - SENIOR_CITIZENS_CARD A senior citizens card number is used as reference to a Party.
    - MARRIAGE_CERTIFICATE A marriage certificate number is used as reference to a Party.
    - HEALTH_CARD A health card number is used as reference to a Party.
    - VOTERS_ID A voter’s identification number is used as reference to a Party.
    - UNITED_NATIONS An UN (United Nations) number is used as reference to a Party.
    - OTHER_ID Any other type of identification type number is used as reference to a Party."
  QRCODE:
    type: string
    minLength: 1
    maxLength: 64
    description: "QR code used as One Time Password."
  RefundReason:
    type: string
    minLength: 1
    maxLength: 128
    description: "Reason for the refund."
  TokenCode:
    type: string
    pattern: ^[0-9a-zA-Z]{4,32}$
    description: "The API data type TokenCode is a JSON String between 4 and 32 characters, consisting of digits or upper or lowercase characters from a to z."
  TransactionInitiator:
    type: string
    enum: [PAYER, PAYEE]
    description: "Below are the allowed values for the enumeration
    - PAYER Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
    - PAYEE Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device."
  TransactionInitiatorType:
    type: string
    enum: [CONSUMER, AGENT, BUSINESS, DEVICE]
    description: "Below are the allowed values for the enumeration
    - CONSUMER Consumer is the initiator of the transaction.
    - AGENT Agent is the initiator of the transaction.
    - BUSINESS Business is the initiator of the transaction.
    - DEVICE Device is the initiator of the transaction."
  TransactionRequestState:
    type: string
    enum: [RECEIVED, PENDING, ACCEPTED, REJECTED]
    description: "Below are the allowed values for the enumeration
    - RECEIVED Payer FSP has received the transaction from the Payee FSP.
    - PENDING Payer FSP has sent the transaction request to the Payer.
    - ACCEPTED Payer has approved the transaction.
    - REJECTED Payer has rejected the transaction."
  TransactionScenario:
    type: string
    enum: [DEPOSIT, WITHDRAWAL, TRANSFER, PAYMENT, REFUND]
    description: "Below are the allowed values for the enumeration
    - DEPOSIT Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
    - WITHDRAWAL Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
    - TRANSFER Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
    - PAYMENT Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
    - REFUND Used for performing a refund of transaction."
  TransactionState:
    type: string
    enum: [RECEIVED, PENDING, COMPLETED, REJECTED]
    description: "Below are the allowed values for the enumeration
    - RECEIVED Payee FSP has received the transaction from the Payer FSP.
    - PENDING Payee FSP has validated the transaction.
    - COMPLETED Payee FSP has successfully performed the transaction.
    - REJECTED Payee FSP has failed to perform the transaction."
  TransactionSubScenario:
    type: string
    minLength: 1
    maxLength: 128
    description: "Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type)."
  TransferState:
    type: string
    enum: [RECEIVED, RESERVED, COMMITTED, ABORTED]
    description: "Below are the allowed values for the enumeration
    - RECEIVED Next ledger has received the transfer.
    - RESERVED Next ledger has reserved the transfer.
    - COMMITTED Next ledger has successfully performed the transfer.
    - ABORTED Next ledger has aborted the transfer due a rejection or failure to perform the transfer."
  UndefinedEnum:
    type: string
    pattern: ^[A-Z_]{1,32}$
    description: "The API data type UndefinedEnum is a JSON String consisting of 1 to 32 uppercase characters including an underscore character (_)."
  
  #Complex Types
  AuthenticationInfo:
    type: object
    description: "Data model for the complex type AuthenticationInfo"
    properties:
      authentication: AuthenticationType
      authenticationValue: AuthenticationValue
  AuthorizationsIDPutResponse:
    type: object
    description: "PUT /authorizations/{ID} object"
    properties:
      authenticationInfo?: AuthenticationInfo
      responseType: AuthorizationResponse
  BulkQuotesPostRequest:
    type: object
    description: "POST /bulkQuotes object"
    properties:
      bulkQuoteId: CorrelationId
      payer: Party
      geoCode?: GeoCode
      expiration?: DateTime
      individualQuotes:
        type: array
        items:
          type: IndividualQuote
        minItems: 1
        maxItems: 1000
      extensionList?: ExtensionList
  BulkQuotesIDPutResponse:
    type: object
    description: "PUT /bulkQuotes/{ID} object"
    properties:
      individualQuoteResults?:
        type: array
        items:
          type: IndividualQuoteResult
        maxItems: 1000
        description: "Fees for each individual transaction, if any of them are charged per transaction."
      expiration: DateTime
      extensionList?: ExtensionList 
  BulkTransfersPostRequest:
    type: object
    description: "POST /bulkTransfers object"
    properties:
      bulkTransferId: CorrelationId
      bulkQuoteId: CorrelationId
      payerFsp: FspId
      payeeFsp: FspId
      individualTransfers:
        type: array
        items:
          type: IndividualTransfer
        minItems: 1
        maxItems: 1000
        description: "List of IndividualTransfer elements."
      expiration: DateTime
      extensionList?: ExtensionList
  BulkTransfersIDPutResponse:
    type: object
    description: PUT /bulkTransfers/{ID} object
    properties:
      completedTimestamp?: DateTime
      individualTransferResults?:
        type: array
        items:
          type: IndividualTransferResult
        maxItems: 1000
        description: "List of IndividualTransfer elements."
      bulkTransferState: BulkTransferState
      extensionList?: ExtensionList
  ErrorInformation:
    type: object
    description: "Data model for the complex type ErrorInformation."
    properties:
      errorCode: ErrorCode
      errorDescription: ErrorDescription
      extensionList?: ExtensionList
  ErrorInformationObject:
    type: object
    description: "Data model for the complex type object that contains ErrorInformation."
    properties:
      errorInformation: ErrorInformation
  ErrorInformationResponse:
    type: object
    description: "Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses."
    properties:
      errorInformation?: ErrorInformation
  Extension:
    type: object
    description: "Data model for the complex type Extension"
    properties:
      key: ExtensionKey
      value: ExtensionValue
  ExtensionList:
    type: object
    properties:
      extension?:
        type: array
        items:
          type: Extension
        minItems: 1
        maxItems: 16
    description: "Data model for the complex type ExtensionList"
  GeoCode:
    type: object
    description: "Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated."
    properties:
      latitude: Latitude
      longitude: Longitude
  IndividualQuote:
    type: object
    description: "Data model for the complex type IndividualQuote."
    properties:
      quoteId: CorrelationId
      transactionId: CorrelationId
      payee: Party
      amountType: AmountType
      amount: Money
      fees?: Money
      transactionType: TransactionType
      note?: Note
      extensionList?: ExtensionList
  IndividualQuoteResult:
    type: object
    description: "Data model for the complex type IndividualQuoteResult."
    properties:
      quoteId: CorrelationId
      payee?: Party
      transferAmount?: Money
      payeeReceiveAmount?: Money
      payeeFspFee?: Money
      payeeFspCommission?: Money
      ilpPacket?: IlpPacket
      condition?: IlpCondition
      errorInformation?: ErrorInformation
      extensionList?: ExtensionList
  IndividualTransfer:
    type: object
    description: "Data model for the complex type IndividualTransfer."
    properties:
      transferId: CorrelationId
      transferAmount: Money
      ilpPacket: IlpPacket
      condition: IlpCondition
      extensionList?: ExtensionList
  IndividualTransferResult:
    type: object
    description: "Data model for the complex type IndividualTransferResult."
    properties:
      transferId: CorrelationId
      fulfilment?: IlpFulfilment
      errorInformation?: ErrorInformation
      extensionList?: ExtensionList
  Money:
    type: object
    description: "Data model for the complex type Money."
    properties:
      currency: Currency
      amount: Amount
  ParticipantsTypeIDSubIDPostRequest:
    type: object
    description: "POST /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object"
    properties:
      fspId: FspId
      currency?: Currency
  ParticipantsTypeIDPutResponse:
    type: object
    description: "PUT /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object"
    properties:
      fspId?: FspId
  ParticipantsIDPutResponse:
    type: object
    description: "PUT /participants/{ID} object"
    properties:
      partyList:
        type: array
        items:
          type: PartyResult
        description: "List of PartyResult elements that were either created or failed to be created."
        minItems: 1
        maxItems: 10000
      currency?: Currency
  ParticipantsPostRequest:
    type: object
    description: "POST /participants object"
    properties:
      requestId: CorrelationId
      partyList:
        type: array
        items:
          type: PartyIdInfo
        description: "List of created PartyIdInfo elements."
        minItems: 1
        maxItems: 10000
      currency?: Currency
  Party:
    type: object
    description: "Data model for the complex type Party"
    properties:
      partyIdInfo: PartyIdInfo
      merchantClassificationCode?: MerchantClassificationCode
      name?: PartyName
      personalInfo?: PartyPersonalInfo
  PartyComplexName:
    type: object
    description: "Data model for the complex type PartyComplexName"
    properties:
      firstName?: FirstName
      middleName?: MiddleName
      lastName?: LastName
  PartyIdInfo:
    type: object
    description: "Data model for the complex type PartyIdInfo"
    properties:
      partyIdType: PartyIdType
      partyIdentifier: PartyIdentifier
      partySubIdOrType?: PartySubIdOrType
      fspId?: FspId
  PartiesTypeIDPutResponse:
    type: object
    description: "PUT /parties/{Type}/{ID} object"
    properties:
      party: Party
  PartyPersonalInfo:
    type: object
    description: "Data model for the complex type PartyPersonalInfo."
    properties:
      complexName?: PartyComplexName
      dateOfBirth?: PartyIdentifier
  PartyResult:
    type: object
    description: "Data model for the complex type PartyResult."
    properties:
      partyId: PartyIdInfo
      errorInformation?: ErrorInformation
  QuotesPostRequest:
    type: object
    description: "POST /quotes object"
    properties:
      quoteId: CorrelationId
      transactionId: CorrelationId
      transactionRequestId?: CorrelationId
      payee: Party
      payer: Party
      amountType: AmountType
      amount: Money
      fees?: Money
      transactionType: TransactionType
      geoCode?: GeoCode
      note?: Note
      expiration?: DateTime
      extensionList?: ExtensionList
  QuotesIDPutResponse:
    type: object
    description: "PUT /quotes/{ID} object"
    properties:
      transferAmount: Money
      payeeReceiveAmount?: Money
      payeeFspFee?: Money
      payeeFspCommission?: Money
      expiration: DateTime
      geoCode?: GeoCode
      ilpPacket: IlpPacket
      condition: IlpCondition
      extensionList?: ExtensionList
  Refund:
    type: object
    description: "Data model for the complex type Refund."
    properties:
      originalTransactionId: CorrelationId
      refundReason?: RefundReason
  Transaction:
    type: object
    description: "Data model for the complex type Transaction."
    properties:
      transactionId: CorrelationId
      quoteId: CorrelationId
      payee: Party
      payer: Party
      amount: Money
      transactionType: TransactionType
      note?: Note
      extensionList?: ExtensionList
  TransactionRequestsIDPutResponse:
    type: object
    description: "PUT /transactionRequests/{ID} object"
    properties:
      transactionId?: CorrelationId
      transactionRequestState: TransactionRequestState
      extensionList?: ExtensionList
  TransactionsIDPutResponse:
    type: object
    description: "PUT /transactions/{ID} object"
    properties:
      completedTimestamp?: DateTime
      transactionState: TransactionState
      code?: Code
      extensionList?: ExtensionList
  TransactionType:
    type: object
    description: "Data model for the complex type TransactionType"
    properties:
      scenario: TransactionScenario
      subScenario?: TransactionSubScenario
      initiator: TransactionInitiator
      initiatorType: TransactionInitiatorType
      refundInfo?: Refund
      balanceOfPayments?: BalanceOfPayments
  TransfersPostRequest:
    type: object
    description: "POST /transfers Request object"
    properties:
      transferId: CorrelationId
      payeeFsp: FspId
      payerFsp: FspId
      amount: Money
      ilpPacket: IlpPacket
      condition: IlpCondition
      expiration: DateTime
      extensionList?: ExtensionList
  TransactionRequestsPostRequest:
    type: object
    description: "POST /transactionRequests object"
    properties:
      transactionRequestId: CorrelationId
      payee: Party
      payer: PartyIdInfo
      amount: Money
      transactionType: TransactionType
      note?: Note
      geoCode?: GeoCode
      authenticationType?: AuthenticationType
      expiration?: DateTime
      extensionList?: ExtensionList
  TransfersIDPutResponse:
    type: object
    description: "PUT /transfers/{ID} object"
    properties:
      fulfilment?: IlpFulfilment
      completedTimestamp?: DateTime
      transferState: TransferState
      extensionList?: ExtensionList


traits:
  headers-get-delete:
    usage: Apply this to get and delete methods
    description: This trait contains the list of headers applicable for get and delete methods.
    headers:
      Accept:
        required: true
        type: string
        description: "The Accept header field indicates the version of the API the client would like the server to use."
      Content-Type:
        type: string
        required: true
        description: "The Content-Type header indicates the specific version of the API used to send the payload body."
      Date:
        type: string
        required: true
        description: "The Date header field indicates the date when the request was sent."
      X-Forwarded-For:
        type: string
        required: false
        description: "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API.
          Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For."
      FSPIOP-Source:
        type: string
        required: true
        description: "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the source FSP (sender of the HTTP request). The field should be populated by the source FSP. Required for signature verification, see header field FSPIOP-Signature."
      FSPIOP-Destination:
        type: string
        required: false
        description: "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses. This field should be populated by the destination FSP identifier (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes."
      FSPIOP-Encryption:
        type: string
        required: false
        description: "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request."
      FSPIOP-Signature:
        type: string
        required: false
        description: "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature."
      FSPIOP-URI:
        type: string
        required: false
        description: "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document."
      FSPIOP-HTTP-Method:
        type: string
        required: false
        description: "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document."
  headers-put:
    usage: Apply this to put method
    description: This trait contains the list of headers applicable for put method.
    headers:
      Content-Length:
        required: false
        type: integer
        description: "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)"
      Content-Type:
        type: string
        required: true
        description: "The Content-Type header indicates the specific version of the API used to send the payload body."
      Date:
        type: string
        required: true
        description: "The Date header field indicates the date when the request was sent."
      X-Forwarded-For:
        type: string
        required: false
        description: "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API.
          Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For."
      FSPIOP-Source:
        type: string
        required: true
        description: "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field FSPIOP-Signature)."
      FSPIOP-Destination:
        type: string
        required: false
        description: "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes."
      FSPIOP-Encryption:
        type: string
        required: false
        description: "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request."
      FSPIOP-Signature:
        type: string
        required: false
        description: "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature."
      FSPIOP-URI:
        type: string
        required: false
        description: "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document."
      FSPIOP-HTTP-Method:
        type: string
        required: false
        description: "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document."
  headers-post:
    usage: Apply this to post method
    description: This trait contains the list of headers applicable for post method.
    headers:
      Accept:
        required: true
        type: string
        description: "The Accept header field indicates the version of the API the client would like the server to use."
      Content-Type:
        type: string
        required: true
        description: "The Content-Type header indicates the specific version of the API used to send the payload body."
      Content-Length:
        required: false
        type: integer
        description: "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)"
      Date:
        type: string
        required: true
        description: "The Date header field indicates the date when the request was sent."
      X-Forwarded-For:
        type: string
        required: false
        description: "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API.
          Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For."
      FSPIOP-Source:
        type: string
        required: true
        description: "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the source FSP (sender of the HTTP request). The field should be populated by the source FSP. Required for signature verification, see header field FSPIOP-Signature."
      FSPIOP-Destination:
        type: string
        required: false
        description: "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses. This field should be populated by the destination FSP identifier (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes."
      FSPIOP-Encryption:
        type: string
        required: false
        description: "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request."
      FSPIOP-Signature:
        type: string
        required: false
        description: "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature."
      FSPIOP-URI:
        type: string
        required: false
        description: "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document."
      FSPIOP-HTTP-Method:
        type: string
        required: false
        description: "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document."
  response-codes-200:
    usage: Apply this to put method
    description: This trait contains the list of response codes applicable for put method.
    responses:
      200:
        description: "OK"
      400:
        description: "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      401:
        description: "Unauthorized - The request requires authentication in order to be processed."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      403:
        description: "Forbidden - The request was denied and will be denied in the future."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      404:
        description: "Not Found - The resource specified in the URI was not found."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      405:
        description: "Method Not Allowed - An unsupported HTTP method for the request was used."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      406:
        description: "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      501:
        description: "Not Implemented - The server does not support the requested service. The client should not retry."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      503:
        description: "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
  response-codes-202:
    usage: Apply this to get, post and delete methods
    description: This trait contains the list of response codes applicable for get, post and delete methods.
    responses:
      202:
        description: "Accepted"
      400:
        description: "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      401:
        description: "Unauthorized - The request requires authentication in order to be processed."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      403:
        description: "Forbidden - The request was denied and will be denied in the future."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      404:
        description: "Not Found - The resource specified in the URI was not found."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      405:
        description: "Method Not Allowed - An unsupported HTTP method for the request was used."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      406:
        description: "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      501:
        description: "Not Implemented - The server does not support the requested service. The client should not retry."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string
      503:
        description: "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame."
        body: 
          type: ErrorInformationResponse
        headers:
          Content-Length:
            description: The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)
            type: integer
          Content-Type:
            description: The Content-Type header indicates the specific version of the API used to send the payload body.
            type: string

/participants:
  post:
    is: [ response-codes-202, headers-post ]
    description: "The HTTP request POST /participants is used to create information in the server regarding the provided list of identities. This request should be used for bulk create of FSP information for more than one party. The optional currency parameter should indicate that each provided Party supports the currency."
    body:
      application/json:
        type: ParticipantsPostRequest
        example:
         {
            "requestId": "b51ec534-ee48-4575-b6a9-ead2955b8069",
            "partyList":
                [ {
                  "partyIdType": "MSISDN",
                  "partyIdentifier": "16135551212",
                  "partySubIdOrType": "PASSPORT",
                  "fspId": "1234"
                },
                {
                  "partyIdType": "MSISDN",
                  "partyIdentifier": "16135551234",
                  "partySubIdOrType": "DRIVING_LICENSE",
                  "fspId": "1234"
                } ],
                "currency": "USD"
            }
  /{ID}:
    uriParameters:
      ID:
        type: string
    put:
      is: [ response-codes-200, headers-put ]
      description: "The callback PUT /participants/{ID} is used to inform the client of the result of the creation of the provided list of identities."
      body:
        "application/json":
          type: ParticipantsIDPutResponse
          example:
            { 
              partyList: 
              [ 
                { 
                    partyId: {
                      partyIdType: "PERSONAL_ID",
                      partyIdentifier: "personal_id"
                    }
                }, 
                { 
                    partyId: {
                      partyIdType: "PERSONAL_ID",
                      partyIdentifier: "personal_id"
                    }
                }
              ],
              currency: "USD"
            }
    /error:
      put:
        is: [ response-codes-200, headers-put ]
        description: "In case there is some processing error during FSP information creation in the server, the error callback PUT /participants/{ID}/error is used."
        body:
          application/json:
            type: ErrorInformationObject
            example:  |
              {
                "errorInformation": 
                  {
                    "errorCode": "5100",
                    "errorDescription": "This is an error description",
                    "extensionList":
                    {
                      "extension":
                      [ 
                        { 
                          "key": "errorDescription", 
                          "value": "This is a more detailed error description"
                        }, 
                        { 
                          "key": "errorDescription",
                          "value": "This is a more detailed error description"
                        }
                      ]
                    }
                  }
              }
  /{Type}/{ID}:
    uriParameters:
      Type:
        type: "string"
      ID:
        type: "string"
    get:
      is: [ response-codes-202, headers-get-delete ]
      description: "The HTTP request GET /participants/{Type}/{ID} (or GET /participants/{Type}/{ID}/{SubId}) is used to find out in which FSP the requested Party, defined by {Type}, {ID} and optionally {SubId}, is located in (e.g. /participants/MSISDN/123456789, or /participants/BUSINESS/shoecompany/employee1).
        This HTTP request should support a Query string for filtering of currency. To use filtering of currency, the HTTP request GET /participants/{Type}/{ID}?currency=XYZ should be used, where XYZ should be changed to the requested currency."
    post:
      is: [ response-codes-202, headers-post ]
      description: "The HTTP request POST /participants/{Type}/{ID} (or POST /participants/{Type}/{ID}/{SubId}) is used to create information in the server regarding the provided identity, defined by {Type}, {ID}, and optionally {SubId} (e.g. /participants/MSISDN/123456789 or /participants/BUSINESS/shoecompany/employee1)."
      body:
        application/json:
          type: ParticipantsTypeIDSubIDPostRequest
          example:
            {
              fspId: "1234",
              currency: "USD"
            }
    delete:
      is: [ response-codes-202, headers-get-delete ]
      description: "The HTTP request DELETE /participants/{Type}/{ID} (or DELETE /participants/{Type}/{ID}/{SubId}) is used to delete information in the server regarding the provided identity, defined by {Type} and {ID}) (e.g. /participants/MSISDN/123456789), and optionally {SubId}.
        This HTTP request should support a Query string to delete FSP information regarding a specific currency only. To only delete a specific currency, the HTTP request DELETE /participants/{Type}/{ID}?currency=XYZ should be used, where XYZ should be changed to the requested currency.
        Note -  The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information."
    put:
      is: [ response-codes-200, headers-put ]
      description: "The callback PUT /participants/{Type}/{ID} (or PUT /participants/{Type}/{ID}/{SubId}) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the party. If the FSP information is deleted, the fspId element should be empty, otherwise the element should include the FSP information for the party."
      body:
        application/json:
          type: ParticipantsTypeIDPutResponse
          example:
            { 
              fspId: "1234"
            }
    /error:
        put:
          is: [ response-codes-200, headers-put ]
          description: "In case the server is unable to find, create or delete the associated FSP of the provided identity, or some other processing error occurred, the error callback PUT /participants/{Type}/{ID}/error (or PUT /participants/{Type}/{ID}/{SubId}/error) is used."
          body:
            "application/json":
              type: ErrorInformationObject
              example:  |
                {
                  "errorInformation": 
                  {
                    "errorCode": "5100",
                    "errorDescription": "This is an error description",
                    "extensionList":
                    {
                      "extension":
                      [ 
                        { 
                          "key": "errorDescription", 
                          "value": "This is a more detailed error description"
                        }, 
                        { 
                          "key": "errorDescription",
                          "value": "This is a more detailed error description"
                        }
                      ]
                    }
                  }
                }
    /{SubId}:
      uriParameters:
        SubId:
          type: string
      get:
        is: [ response-codes-202, headers-get-delete ]
        description: "The HTTP request GET /participants/{Type}/{ID} (or GET /participants/{Type}/{ID}/{SubId}) is used to find out in which FSP the requested Party, defined by {Type}, {ID} and optionally {SubId}, is located in (e.g. /participants/MSISDN/123456789, or /participants/BUSINESS/shoecompany/employee1).
        This HTTP request should support a Query string for filtering of currency. To use filtering of currency, the HTTP request GET /participants/{Type}/{ID}?currency=XYZ should be used, where XYZ should be changed to the requested currency."
      post:
        is: [ response-codes-202, headers-post ]
        description: "The HTTP request POST /participants/{Type}/{ID} (or POST /participants/{Type}/{ID}/{SubId}) is used to create information in the server regarding the provided identity, defined by {Type}, {ID}, and optionally {SubId} (e.g. /participants/MSISDN/123456789 or /participants/BUSINESS/shoecompany/employee1)."
        body:
          "application/json":
            type: ParticipantsTypeIDSubIDPostRequest
            example:
              {
                fspId: "1234",
                currency: "USD"
              }
      delete:
        is: [ response-codes-202, headers-get-delete ]
        description: "The HTTP request DELETE /participants/{Type}/{ID} (or DELETE /participants/{Type}/{ID}/{SubId}) is used to delete information in the server regarding the provided identity, defined by {Type} and {ID}) (e.g. /participants/MSISDN/123456789), and optionally {SubId}.
        This HTTP request should support a Query string to delete FSP information regarding a specific currency only. To only delete a specific currency, the HTTP request DELETE /participants/{Type}/{ID}?currency=XYZ should be used, where XYZ should be changed to the requested currency.
        Note -  The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information."
      put:
        is: [ response-codes-200, headers-put ]
        description: "The callback PUT /participants/{Type}/{ID} (or PUT /participants/{Type}/{ID}/{SubId}) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the party. If the FSP information is deleted, the fspId element should be empty, otherwise the element should include the FSP information for the party."
        body:
          type: ParticipantsTypeIDPutResponse
          example:
            { 
              fspId: "1234"
            }
      /error:
        put:
          is: [ response-codes-200, headers-put ]
          description: "In case the server is unable to find, create or delete the associated FSP of the provided identity, or some other processing error occurred, the error callback PUT /participants/{Type}/{ID}/error (or PUT /participants/{Type}/{ID}/{SubId}/error) is used."
          body:
            "application/json":
              type: ErrorInformationObject
              example:
                {
                  "errorInformation": 
                  {
                    "errorCode": "5100",
                    "errorDescription": "This is an error description",
                    "extensionList":
                    {
                      "extension":
                      [ 
                        { 
                          "key": "errorDescription", 
                          "value": "This is a more detailed error description"
                        }, 
                        { 
                          "key": "errorDescription",
                          "value": "This is a more detailed error description"
                        }
                      ]
                    }
                  }
                }

/parties/{Type}/{ID}:
  uriParameters:
    Type:
      type: "string"
    ID:
      #type: "string"
  get:
    is: [ response-codes-202, headers-get-delete ]
    description: "The HTTP request GET /parties/{Type}/{ID} (or GET /parties/{Type}/{ID}/{SubId}) is used to lookup information regarding the requested Party, defined by {Type}, {ID} and optionally {SubId} (e.g. /parties/MSISDN/123456789, or /parties/BUSINESS/shoecompany/employee1)."
  put:
    is: [ response-codes-200, headers-put ]
    description: "The callback PUT /parties/{Type}/{ID} (or PUT /parties/{Type}/{ID}/{SubId}) is used to inform the client of a successful result of the party information lookup."
    body:
      "application/json":
        type: PartiesTypeIDPutResponse
        example:
          {
            party:
            {
              partyIdInfo:
              {
                partyIdType: "MSISDN", 
                partyIdentifier: "16135551212",
                partySubIdOrType: "PASSPORT",
                fspId: "1234"
              },
              merchantClassificationCode: "1234",
              name: "Justin Trudeau", 
              personalInfo:
              { 
                complexName: 
                { 
                  firstName: "Justin", 
                  middleName: "Pierre", 
                  lastName: "Trudeau" 
                }, 
                dateOfBirth: "1971-12-25" 
              }
            }
          }
  /error:
    put:
      is: [ response-codes-200, headers-put ]
      description: "In case the server is unable to find party information of the provided identity, or some other processing error occurred, the error callback PUT /parties/{Type}/{ID}/error (or PUT /parties/{Type}/{ID}/{SubId}/error) is used."
      body:
        "application/json":
          type: ErrorInformationObject
          example:
            {
              "errorInformation": 
                {
                  "errorCode": "5100",
                  "errorDescription": "This is an error description",
                  "extensionList":
                  {
                    "extension":
                    [ 
                      { 
                        "key": "errorDescription", 
                        "value": "This is a more detailed error description"
                      }, 
                      { 
                        "key": "errorDescription",
                        "value": "This is a more detailed error description"
                      }
                    ]
                  }
                }
              }
  /{SubId}:
    uriParameters:
      SubId:
        type: "string"
    get:
      is: [ response-codes-202, headers-get-delete ]
      description: "The HTTP request GET /parties/{Type}/{ID} (or GET /parties/{Type}/{ID}/{SubId}) is used to lookup information regarding the requested Party, defined by {Type}, {ID} and optionally {SubId} (e.g. /parties/MSISDN/123456789, or /parties/BUSINESS/shoecompany/employee1)."
    put:
      is: [ response-codes-200, headers-put ]
      description: "The callback PUT /parties/{Type}/{ID} (or PUT /parties/{Type}/{ID}/{SubId}) is used to inform the client of a successful result of the party information lookup."
      body:
        "application/json":
          type: PartiesTypeIDPutResponse
          example:
            {
              party:
              {
                partyIdInfo:
                {
                  partyIdType: "MSISDN", 
                  partyIdentifier: "16135551212",
                  partySubIdOrType: "PASSPORT",
                  fspId: "1234"
                },
                merchantClassificationCode: "1234",
                name: "Justin Trudeau", 
                personalInfo:
                { 
                  complexName: 
                  { 
                    firstName: "Justin", 
                    middleName: "Pierre", 
                    lastName: "Trudeau" 
                  }, 
                  dateOfBirth: "1971-12-25" 
                }
              }
            }
    /error:
      put:
        is: [ response-codes-200, headers-put ]
        description: "In case the server is unable to find party information of the provided identity, or some other processing error occurred, the error callback PUT /parties/{Type}/{ID}/error (or PUT /parties/{Type}/{ID}/{SubId}/error) is used."
        body:
          "application/json":
            type: ErrorInformationObject
            example:
              {
                "errorInformation": 
                {
                  "errorCode": "5100",
                  "errorDescription": "This is an error description",
                  "extensionList":
                  {
                    "extension":
                    [ 
                      { 
                        "key": "errorDescription", 
                        "value": "This is a more detailed error description"
                      }, 
                      { 
                        "key": "errorDescription",
                        "value": "This is a more detailed error description"
                      }
                    ]
                  }
                }
              }

/quotes:
  post:
    is: [ response-codes-202, headers-post ]
    description: "The HTTP request POST /quotes is used to request the creation of a quote for the provided financial transaction in the server."
    body:
      "application/json":
        type: QuotesPostRequest
        example:
          { 
            quoteId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
            transactionId: "a8323bc6-c228-4df2-ae82-e5a997baf899",
            transactionRequestId: "a8323bc6-c228-4df2-ae82-e5a997baf890",
            payee: 
            { 
              partyIdInfo:
                {
                  partyIdType: "MSISDN", 
                  partyIdentifier: "16135551212",
                  partySubIdOrType: "PASSPORT",
                  fspId: "1234"
                },
                merchantClassificationCode: "1234",
                name: "Justin Trudeau", 
                personalInfo:
                { 
                  complexName: 
                  { 
                    firstName: "Justin", 
                    middleName: "Pierre", 
                    lastName: "Trudeau" 
                  }, 
                  dateOfBirth: "1971-12-25" 
                }
             }, 
            payer: 
            { 
              partyIdInfo:
              {
                partyIdType: "MSISDN", 
                partyIdentifier: "16135551212",
                partySubIdOrType: "PASSPORT",
                fspId: "1234"
              },
              merchantClassificationCode: "5678",
              name: "Donald Trump", 
              personalInfo:
              { 
                complexName:
                { 
                    firstName: "Donald", 
                    middleName: "John", 
                    lastName: "Trump" 
                }, 
                dateOfBirth: "1946-06-14" 
              } 
            }, 
            amountType: "SEND",
            amount: 
            { 
              currency: "USD", 
              amount: "123.45"
            },
            fees:
            { 
              currency: "USD", 
              amount: "1.45"
            },
            transactionType: 
            { 
              scenario: "DEPOSIT", 
              subScenario: "locally defined sub-scenario", 
              initiator: "PAYEE", 
              initiatorType: "CONSUMER", 
              refundInfo: 
              { 
                originalTransactionId: "b51ec534-ee48-4575-b6a9-ead2955b8069", 
                refundReason: "free text indicating reason for the refund" 
              }, 
              balanceOfPayments: "123" 
            }, 
            geoCode: 
            { 
              latitude: "+45.4215", 
              longitude: "+75.6972" 
            },
            note: "Free-text memo",
            expiration: "2016-05-24T08:38:08.699-04:00",
            extensionList:
            {
              extension:
              [ 
                { 
                  key: "key1", 
                  value: "value1"
                }, 
                { 
                  key: "key2", 
                  value: "value2"
                }
              ]
            }
          }
  /{ID}:
    uriParameters:
      ID:
        type: "string"
    get:
      is: [ response-codes-202, headers-get-delete ]
      description: "The HTTP request GET /quotes/{ID} is used to get information regarding an earlier created or requested quote."
    put:
      is: [ response-codes-200, headers-put ]
      description: "The callback PUT /quotes/{ID} is used to inform the client of a requested or created quote."
      body:
        "application/json":
          type: QuotesIDPutResponse
          example:
            { 
              transferAmount: 
              { 
                  currency: "USD", 
                  amount: "124.45" 
              },
              payeeReceiveAmount: 
              { 
                  currency: "USD", 
                  amount: "123" 
              },
              payeeFspFee:
              { 
                  currency: "USD", 
                  amount: "1.45"
              },
              payeeFspCommission:
              { 
                  currency: "USD", 
                  amount: "0" 
              },
              expiration: "2016-05-24T08:38:08.699-04:00",
              geoCode:
              { 
                  latitude: "+45.4215", 
                  longitude: "+75.6972"
              },
              ilpPacket: "AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA",
              condition: "YlK5TZyhflbXaDRPtR5zhCu8FrbgvrQwwmzuH0iQ0AI",
              extensionList:
              {
                extension:
                [ 
                  { 
                    key: "key1", 
                    value: "value1"
                  }, 
                  { 
                    key: "key2", 
                    value: "value2"
                  }
                ]
              }
            }
    /error:
      put:
        is: [ response-codes-200, headers-put ]
        description: "In case the server is unable to find or create a quote, or some other processing error occurs, the error callback PUT /quotes/{ID}/error is used."
        body:
          "application/json":
            type: ErrorInformationObject
            example:
              {
                errorInformation: 
                  {
                    errorCode: "5100",
                    errorDescription: "This is an error description",
                    extensionList:
                    {
                      extension:
                      [ 
                        { 
                          key: "key1", 
                          value: "value1"
                        }, 
                        { 
                          key: "key2", 
                          value: "value2"
                        }
                      ]
                    }
                  }
                }

/authorizations/{ID}:
  uriParameters:
    ID:
      type: "string"
  get:
    is: [ response-codes-202, headers-get-delete ]
    description: "Used to request the Payer to enter the applicable credentials in the Payee FSP system. The {ID} must be the transaction request ID, received from the POST /transactionRequests service earlier in the process. This request requires a query string to be included in the URI, with the following key-value pairs -
    authenticationType={Type}, where {Type} contains a valid authentication type from the enumeration AuthenticationType retriesLeft={NrOfRetries}, where {NrOfRetries} contains the number of retries left before the financial transaction is rejected. The {NrOfRetries} must be expressed in the form of the data type Integer.
    retriesLeft=1 means that this is the last retry before the financial transaction is rejected. amount={Amount}, where {Amount} contains the transaction amount that will be withdrawn from the Payer’s account. The {Amount} must be expressed in the form of the data type Amount.
    currency={Currency}, where the {Currency} contains the transaction currency for the amount that will be withdrawn from the Payer’s account. The {Currency} must be expressed in the form of the enumeration CurrencyCode.
    An example URI containing all the required key-value pairs in the query string is the following - GET /authorization/3d492671-b7af-4f3f-88de-76169b1bdf88?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD"
  put:
    is: [ response-codes-200, headers-put ]
    description: "The callback PUT /authorizations/{ID} is used to inform the client of the result of a previously requested authorization."
    body:
      "application/json":
        type: AuthorizationsIDPutResponse
        example:
          { 
            authenticationInfo: 
            { 
                authentication: "OTP", 
                authenticationValue: "1234" 
            },
            responseType: "ENTERED"
          }
  /error:
    put:
      is: [ response-codes-200, headers-put ]
      description: "In case the server is unable to find the transaction request, or some other processing error occurs, the error callback PUT /authorizations/{ID}/error is used."
      body:
        "application/json":
          type: ErrorInformationObject
          example:
            {
              errorInformation: 
                {
                  errorCode: "5100",
                  errorDescription: "This is an error description",
                  extensionList:
                  {
                    extension:
                    [ 
                      { 
                        key: "key1", 
                        value: "value1"
                      }, 
                      { 
                        key: "key2", 
                        value: "value2"
                      }
                    ]
                  }
                }
              }
/transfers:
  post:
    is: [ response-codes-202, headers-post ]
    description: "The HTTP request POST /transfers is used to request the creation of a transfer for the next ledger, and a financial transaction for the Payee FSP."
    body:
      "application/json":
        type: TransfersPostRequest
        example:
          { 
            transferId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
            payeeFsp: "1234",
            payerFsp: "5678", 
            amount: 
            { 
                currency: "USD", 
                amount: "123.45"
            }, 
            ilpPacket: "AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA",
            condition: "YlK5TZyhflbXaDRPtR5zhCu8FrbgvrQwwmzuH0iQ0AI",
            expiration: "2016-05-24T08:38:08.699-04:00",
            extensionList:
            {
              extension:
              [ 
                { 
                  key: "key1", 
                  value: "value1"
                }, 
                { 
                  key: "key2", 
                  value: "value2"
                }
              ]
            }
          }
  /{ID}:
    uriParameters:
      ID:
        type: string
    get:
      is: [ response-codes-202, headers-get-delete ]
      description: "The HTTP request GET /transfers/{ID} is used to get information regarding an earlier created or requested transfer."
    put:
      is: [ response-codes-200, headers-put ]
      description: "The callback PUT /transfers/{ID} is used to inform the client of a requested or created transfer."
      body:
        "application/json":
          type: TransfersIDPutResponse
          example:
            { 
              fulfilment: "WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8",
              completedTimestamp: "2016-05-24T08:38:08.699-04:00",
              transferState: "RESERVED",
              extensionList:
              {
                extension:
                [ 
                  { 
                    key: "key1", 
                    value: "value1"
                  }, 
                  { 
                    key: "key2", 
                    value: "value2"
                  }
                ]
              }
            }
    /error:
      put:
        is: [ response-codes-200, headers-put ]
        description: "In case the server is unable to find or create a transfer, or some other processing error occurs, the error callback PUT /transfers/{ID}/error is used."
        body:
          "application/json":
            type: ErrorInformationObject
            example:
              {
                errorInformation: 
                  {
                    errorCode: "5100",
                    errorDescription: "This is an error description",
                    extensionList:
                    {
                      extension:
                      [ 
                        { 
                          key: "key1", 
                          value: "value1"
                        }, 
                        { 
                          key: "key2", 
                          value: "value2"
                        }
                      ]
                    }
                  }
                }
/transactions/{ID}:
  uriParameters:
    ID:
      type: "string"
  get:
    is: [ response-codes-202, headers-get-delete ]
    description: "The HTTP request GET /transactions/{ID} is used to get transaction information regarding an earlier created financial transaction. The {ID} is the transactionId from the Transaction data model"
  put:
    is: [ response-codes-200, headers-put ]
    description: " The callback PUT /transactions/{ID} is used to inform the client of a requested or created transaction."
    body:
      "application/json":
        type: TransactionsIDPutResponse
        example:
          { 
              completedTimestamp: "2016-05-24T08:38:08.699-04:00",
              transactionState: "RECEIVED",
              code: "Test-Code",
              extensionList:
              {
                extension:
                [ 
                  { 
                    key: "key1", 
                    value: "value1"
                  }, 
                  { 
                    key: "key2", 
                    value: "value2"
                  }
                ]
              }
          }
  /error:
    put:
      is: [ response-codes-200, headers-put ]
      description: "In case the server is unable to find or create a transaction, or some other processing error occurs, the error callback PUT /transactions/{ID}/error is used."
      body:
        "application/json":
          type: ErrorInformationObject
          example:
            {
              errorInformation: 
                {
                  errorCode: "5100",
                  errorDescription: "This is an error description",
                  extensionList:
                  {
                    extension:
                    [ 
                      { 
                        key: "key1", 
                        value: "value1"
                      }, 
                      { 
                        key: "key2", 
                        value: "value2"
                      }
                    ]
                  }
                }
              }

/transactionRequests:
  post:
    is: [ response-codes-202, headers-post ]
    description: "The HTTP request POST /transactionRequests is used to request the creation of a transaction request for the provided financial transaction in the server."
    body:
      "application/json":
        type: TransactionRequestsPostRequest
        example:
          { 
              transactionRequestId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
              payee: 
              { 
                partyIdInfo:
                {
                  partyIdType: "MSISDN", 
                  partyIdentifier: "16135551212",
                  partySubIdOrType: "PASSPORT",
                  fspId: "1234"
                },
                merchantClassificationCode: "1234",
                name: "Justin Trudeau", 
                personalInfo: 
                { 
                  complexName: 
                  { 
                    firstName: "Justin", 
                    middleName: "Pierre", 
                    lastName: "Trudeau" 
                  }, 
                  dateOfBirth: "1971-12-25" 
                }
              }, 
              payer:  #PartyIdInfo type
              {
                  partyIdType: "MSISDN", 
                  partyIdentifier: "16135551212",
                  partySubIdOrType: "DRIVING_LICENSE",
                  fspId: "1234"
              }, 
              amount:
              { 
                  currency: "USD", 
                  amount: "123.45" 
              },
              transactionType: 
              { 
                  scenario: "DEPOSIT", 
                  subScenario: "locally defined sub-scenario", 
                  initiator: "PAYEE", 
                  initiatorType: "CONSUMER", 
                  refundInfo: 
                  { 
                      originalTransactionId: "b51ec534-ee48-4575-b6a9-ead2955b8069", 
                      refundReason: "free text indicating reason for the refund" 
                  }, 
                  balanceOfPayments: "123" 
               }, 
              note: "Free text memo",
              geoCode: { 
                  latitude: "+45.4215", 
                  longitude: "+75.6972" 
              },
              authenticationType: "OTP", 
              expiration: "2016-05-24T08:38:08.699-04:00",
              extensionList:
              {
                extension:
                [ 
                  { 
                    key: "key1", 
                    value: "value1"
                  }, 
                  { 
                    key: "key2", 
                    value: "value2"
                  }
                ]
              }
            }
  /{ID}:
    uriParameters:
      ID:
        type: "string"
    get:
      is: [ response-codes-202, headers-get-delete ]
      description: "The HTTP request GET /transactionRequests/{ID} is used to get information regarding an earlier created or requested transaction request."
    put:
      is: [ response-codes-200, headers-put ]
      description: "The callback PUT /transactionRequests/{ID} is used to inform the client of a requested or created transaction request."
      body:
        "application/json":
          type: TransactionRequestsIDPutResponse
          example:
            { 
              transactionId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
              transactionRequestState: "RECEIVED",
              extensionList:
              {
                extension:
                [ 
                  { 
                    key: "key1", 
                    value: "value1"
                  }, 
                  { 
                    key: "key2", 
                    value: "value2"
                  }
                ]
              }
            }
    /error:
      put:
        is: [ response-codes-200, headers-put ]
        description: "In case the server is unable to find or create a transaction request, or some other processing error occurs, the error callback PUT /transactionRequests/{ID}/error is used."
        body:
          "application/json":
            type: ErrorInformationObject
            example:
              {
                errorInformation: 
                  {
                    errorCode: "5100",
                    errorDescription: "This is an error description",
                    extensionList:
                    {
                      extension:
                      [ 
                        { 
                          key: "key1", 
                          value: "value1"
                        }, 
                        { 
                          key: "key2", 
                          value: "value2"
                        }
                      ]
                    }
                  }
                }
        
/bulkQuotes:
  post:
    is: [ response-codes-202, headers-post ]
    description: "The HTTP request POST /bulkQuotes is used to request the creation of a bulk quote for the provided financial transactions in the server."
    body:
      "application/json":
        type: BulkQuotesPostRequest
        example:
          { 
              bulkQuoteId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
              payer: 
              { 
                partyIdInfo:
                {
                  partyIdType: "MSISDN", 
                  partyIdentifier: "16135551212",
                  partySubIdOrType: "PASSPORT",
                  fspId: "1234"
                },
                merchantClassificationCode: "1234",
                name: "Justin Trudeau", 
                personalInfo: 
                { 
                  complexName: 
                  { 
                    firstName: "Justin", 
                    middleName: "Pierre", 
                    lastName: "Trudeau" 
                  }, 
                  dateOfBirth: "1971-12-25" 
                }
              }, 
              geoCode: { 
                  latitude: "+45.4215", 
                  longitude: "+75.6972" 
              },
              expiration: "2016-05-24T08:38:08.699-04:00",
              individualQuotes:
              [ { 
                  quoteId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
                  transactionId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
                  payee: 
                  { 
                      partyIdInfo:
                      {
                        partyIdType: "MSISDN", 
                        partyIdentifier: "16135551212",
                        partySubIdOrType: "PASSPORT",
                        fspId: "1234"
                      },
                      merchantClassificationCode: "1234",
                      name: "Justin Trudeau", 
                      personalInfo: 
                      { 
                          complexName: 
                          { 
                            firstName: "Justin", 
                            middleName: "Pierre", 
                            lastName: "Trudeau"
                          }, 
                          dateOfBirth: "1971-12-25" 
                      }
                   },
                  amountType: "RECEIVE",
                  amount:
                  { 
                      currency: "USD", 
                      amount: "123.45" 
                  },
                  fees:
                  { 
                      currency: "USD", 
                      amount: "1.45" 
                  },
                  transactionType: 
                  { 
                      scenario: "DEPOSIT", 
                      subScenario: "locally defined sub-scenario", 
                      initiator: "PAYEE", 
                      initiatorType: "CONSUMER", 
                      refundInfo: 
                      { 
                          originalTransactionId: "b51ec534-ee48-4575-b6a9-ead2955b8069", 
                          refundReason: "free text indicating reason for the refund" 
                      }, 
                      balanceOfPayments: "123" 
                   },
                  note: "Note sent to Payee",
                  extensionList:
                  {
                    extension:
                    [ 
                      { 
                        key: "key1", 
                        value: "value1"
                      }, 
                      { 
                        key: "key2", 
                        value: "value2"
                      }
                    ]
                  }
                }
              ], 
             extensionList:
              {
                extension:
                [ 
                  { 
                    key: "key1", 
                    value: "value1"
                  }, 
                  { 
                    key: "key2", 
                    value: "value2"
                  }
                ]
              }
            }
  /{ID}:
    uriParameters:
      ID:
        type: "string"
    get:
      is: [ response-codes-202, headers-get-delete ]
      description: "The HTTP request GET /bulkQuotes/{ID} is used to get information regarding an earlier created or requested bulk quote."
    put:
      is: [ response-codes-200, headers-put ]
      description: "The callback PUT /bulkQuotes/{ID} is used to inform the client of a requested or created bulk quote."
      body:
        "application/json":
          type: BulkQuotesIDPutResponse
          example:
            { 
              individualQuoteResults: 
              [ { 
                  quoteId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
                  transferAmount:
                  { 
                      currency: "USD", 
                      amount: "123.45" 
                  },
                  payeeFspFee:
                  { 
                      currency: "USD", 
                      amount: "1.45" 
                  },
                  payeeFspCommission:
                  { 
                      currency: "USD", 
                      amount: "1.45" 
                  },
                  ilpPacket: "AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA",
                  condition: "YlK5TZyhflbXaDRPtR5zhCu8FrbgvrQwwmzuH0iQ0AI",
                  errorInformation: 
                  {
                    errorCode: "5100",
                    errorDescription: "This is an error description",
                    extensionList:
                    {
                      extension:
                      [ 
                        { 
                          key: "key1", 
                          value: "value1"
                        }, 
                        { 
                          key: "key2", 
                          value: "value2"
                        }
                      ]
                    }
                  },
                  extensionList:
                  {
                    extension:
                    [ 
                      { 
                        key: "key1", 
                        value: "value1"
                      }, 
                      { 
                        key: "key2", 
                        value: "value2"
                      }
                    ]
                  }
                }
              ],
              expiration: "2016-05-24T08:38:08.699-04:00",
              extensionList:
              {
                extension:
                [ 
                  { 
                    key: "key1", 
                    value: "value1"
                  }, 
                  { 
                    key: "key2", 
                    value: "value2"
                  }
                ]
              }
            }
    /error:
      put:
        is: [ response-codes-200, headers-put ]
        description: "In case the server is unable to find or create a bulk quote, or some other processing error occurs, the error callback PUT /bulkQuotes/{ID}/error is used."
        body:
          "application/json":
            type: ErrorInformationObject
            example:
              {
                errorInformation: 
                  {
                    errorCode: "5100",
                    errorDescription: "This is an error description",
                    extensionList:
                    {
                      extension:
                      [ 
                        { 
                          key: "key1", 
                          value: "value1"
                        }, 
                        { 
                          key: "key2", 
                          value: "value2"
                        }
                      ]
                    }
                  }
                }
          
/bulkTransfers:
  post:
    is: [ response-codes-202, headers-post ]
    description: "The HTTP request POST /bulkTransfers is used to request the creation of a bulk transfer in the server."
    body:
      "application/json":
        type: BulkTransfersPostRequest
        example:
          { 
              bulkTransferId: "b51ec534-ee48-4575-b6a9-ead2955b8069", 
              bulkQuoteId: "b51ec534-ee48-4575-b6a9-ead2955b8069", 
              payeeFsp: "1234",
              payerFsp: "5678",
              individualTransfers: 
              [ { 
                  transferId: "b51ec534-ee48-4575-b6a9-ead2955b8069", 
                  transferAmount: 
                  { 
                      currency: "USD", 
                      amount: "123.45" 
                  }, 
                  ilpPacket: "AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA",
                  condition: "YlK5TZyhflbXaDRPtR5zhCu8FrbgvrQwwmzuH0iQ0AI",
                  extensionList:
                  {
                    extension:
                    [ 
                      { 
                        key: "key1", 
                        value: "value1"
                      }, 
                      { 
                        key: "key2", 
                        value: "value2"
                      }
                    ]
                  }
                }, 
                { 
                  transferId: "b51ec534-ee48-4575-b6a9-ead2955b8069", 
                  transferAmount:
                  { 
                      currency: "USD", 
                      amount: "1233.55" 
                  }, 
                  ilpPacket: "AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA",
                  condition: "f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA",
                  extensionList:
                  {
                    extension:
                    [ 
                      { 
                        key: "key1", 
                        value: "value1"
                      }, 
                      { 
                        key: "key2", 
                        value: "value2"
                      }
                    ]
                  }
                }
              ], 
              expiration: "2016-05-24T08:38:08.699-04:00",
              extensionList:
              {
                extension:
                [ 
                  { 
                    key: "key1", 
                    value: "value1"
                  }, 
                  { 
                    key: "key2", 
                    value: "value2"
                  }
                ]
              }
            }
  /{ID}:
    uriParameters:
      ID:
        type: "string"
    get:
      is: [ response-codes-202, headers-get-delete ]
      description: "The HTTP request GET /bulkTransfers/{ID} is used to get information regarding an earlier created or requested bulk transfer."
    put:
      is: [ response-codes-200, headers-put ]
      description: "The callback PUT /bulkTransfers/{ID} is used to inform the client of a requested or created bulk transfer."
      body:
        "application/json":
          type: BulkTransfersIDPutResponse
          example:
            { 
              completedTimestamp: "2016-05-24T08:38:08.699-04:00", 
              individualTransferResults: 
              [ 
                  {
                      transferId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
                      fulfilment: "WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8", 
                      errorInformation: 
                      {
                        errorCode: "5100",
                        errorDescription: "This is an error description",
                        extensionList:
                        {
                          extension:
                          [ 
                            { 
                              key: "key1", 
                              value: "value1"
                            }, 
                            { 
                              key: "key2", 
                              value: "value2"
                            }
                          ]
                        }
                      },
                      extensionList:
                      {
                        extension:
                        [ 
                          { 
                            key: "key1", 
                            value: "value1"
                          }, 
                          { 
                            key: "key2", 
                            value: "value2"
                          }
                        ]
                      }
                  },
                  { 
                      transferId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
                      fulfilment: "WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8",
                      errorInformation: 
                      {
                        errorCode: "5100",
                        errorDescription: "This is an error description",
                        extensionList:
                        {
                          extension:
                          [ 
                            { 
                              key: "key1", 
                              value: "value1"
                            }, 
                            { 
                              key: "key2", 
                              value: "value2"
                            }
                          ]
                        }
                      },
                      extensionList:
                      {
                        extension:
                        [ 
                          { 
                            key: "key1", 
                            value: "value1"
                          }, 
                          { 
                            key: "key2", 
                            value: "value2"
                          }
                        ]
                      }
                  }
              ],
              bulkTransferState: "RECEIVED", 
              extensionList:
              {
                extension:
                [ 
                  { 
                    key: "key1", 
                    value: "value1"
                  }, 
                  { 
                    key: "key2", 
                    value: "value2"
                  }
                ]
              }
            }
    /error:
      put:
        is: [ response-codes-200, headers-put ]
        description: "In case the server is unable to find or create a bulk transaction, or some other processing error occurs, the error callback PUT /bulkTransfers/{ID}/error is used."
        body:
          "application/json":
            type: ErrorInformationObject
            example:
              {
                errorInformation: 
                  {
                    errorCode: "5100",
                    errorDescription: "This is an error description",
                    extensionList:
                    {
                      extension:
                      [ 
                        { 
                          key: "key1", 
                          value: "value1"
                        }, 
                        { 
                          key: "key2", 
                          value: "value2"
                        }
                      ]
                    }
                  }
                }